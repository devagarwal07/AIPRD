// Core shared utilities for AIPRD

// Redaction (mirrors server + client logic; keep in sync)
export function redactText(val: string): string {
  return val
    .replace(/([A-Z0-9._%+-]+)@([A-Z0-9.-]+\.[A-Z]{2,})/gi, '[REDACTED_EMAIL]')
    .replace(/https?:\/\/[^\s]+/gi, '[REDACTED_URL]')
    .replace(/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/gi, '[REDACTED_ID]')
    .replace(/\b\d{16,}\b/g, '[REDACTED_NUMBER]')
    .replace(/(?:(?:\+\d{1,3}[\s-]?)?(?:\(\d{2,4}\)[\s-]?|\d{2,4}[\s-])?)\d{3,4}[\s-]?\d{3,4}(?:[\s-]?\d{3,4})?/g, '[REDACTED_PHONE]')
    .replace(/\b[a-zA-Z0-9_-]{32,}\b/g, '[REDACTED_TOKEN]')
    .replace(/\b([A-Za-z0-9_.-]{2,40})\/([A-Za-z0-9_.-]{2,80})\b/g, (m, owner: string, repo: string) => {
      const stop = ['the','app','test','prod','dev'];
      if (stop.includes(owner.toLowerCase())) return m;
      if ((owner.length + repo.length) < 6) return m;
      return '[REDACTED_REPO]';
    })
    .replace(/\/(?:[A-Za-z0-9._-]+\/)+[A-Za-z0-9._-]+/g, '[REDACTED_PATH]')
    .replace(/(?:[A-Za-z]:\\|\\\\)[^\s"'`]+/g, '[REDACTED_PATH]');
}

export function redactDeep(obj: any, depth = 0): any {
  if (depth > 6 || obj == null) return obj;
  if (typeof obj === 'string') return redactText(obj);
  if (Array.isArray(obj)) return obj.map(v => redactDeep(v, depth + 1));
  if (typeof obj === 'object') {
    const out: any = {};
    for (const k of Object.keys(obj)) out[k] = redactDeep(obj[k], depth + 1);
    return out;
  }
  return obj;
}

export type PRDContent = {
  title: string;
  problem: string;
  solution: string;
  objectives: string[];
  userStories: string[];
  requirements: string[];
};

export type PRDSections = {
  problem: boolean;
  solution: boolean;
  objectives?: boolean;
  userStories: boolean;
  requirements: boolean;
};

// Frontend form state superset (mirrors app store); kept minimal here to avoid dragging UI-specific optional fields
export interface PRDFormLike extends PRDContent {
  riceScores?: Array<{ id: string; name: string; reach: number; impact: number; confidence: number; effort: number; rice: number; category?: string }>;
  acceptanceCriteria?: Array<{ id: string; storyIndex: number; text: string; done: boolean }>;
  acceptanceBurndown?: Array<{ ts: number; done: number; total: number }>; 
}

export function prdToMarkdown(prd: PRDContent, sections: PRDSections, opts?: { score?: number | null; gaps?: string[] }) {
  const parts: string[] = [];
  parts.push(`# ${prd.title || 'Product Requirements Document'}`);
  if (sections.problem) parts.push('', '## Problem Statement', prd.problem || '—');
  if (sections.solution) parts.push('', '## Solution Overview', prd.solution || '—');
  if (sections.solution && sections.objectives) {
    parts.push('', '## Objectives & Success Metrics');
    parts.push((prd.objectives || []).map((o, i) => `${i + 1}. ${o}`).join('\n') || '—');
  }
  if (sections.userStories) {
    parts.push('', '## User Stories');
    parts.push((prd.userStories || []).map((s, i) => `${i + 1}. ${s}`).join('\n') || '—');
  }
  if (sections.requirements) {
    parts.push('', '## Requirements');
    parts.push((prd.requirements || []).map((r, i) => `${i + 1}. ${r}`).join('\n') || '—');
  }
  if (opts && (opts.score != null || (opts.gaps && opts.gaps.length))) {
    parts.push('', '## Completeness');
    if (opts.score != null) parts.push(`Gemini Score: ${opts.score}/100`);
    if (opts.gaps && opts.gaps.length) parts.push(`Gaps: ${opts.gaps.join(', ')}`);
  }
  parts.push('', '---', '*Generated by PM Copilot*');
  return parts.join('\n');
}

export function arrayToCSV(rows: string[][]): string {
  const esc = (v: string) => {
    const s = String(v ?? '');
    if (/[",\n]/.test(s)) return '"' + s.replace(/"/g, '""') + '"';
    return s;
  };
  return rows.map(r => r.map(esc).join(',')).join('\n');
}

export interface TelemetryEventBase {
  name: string;
  ts: number;
  props?: Record<string, any>;
}

export function buildTelemetryEvent(name: string, props?: Record<string, any>): TelemetryEventBase {
  return { name, ts: Date.now(), props: props ? redactDeep(props) : undefined };
}
